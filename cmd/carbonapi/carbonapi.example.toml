# You can use either 'yaml' or 'toml' as a config format
# Please note, that only 'yaml' example config guaranteed to be up to date
# And only 'carbonapi.example.yaml' have comments about all available parameters
# This file is autoconverted from 'yaml'.
concurency = 1000
cpus = 0
expireDelaySec = 10
idleConnections = 10
listen = "localhost:8081"
pidFile = ""
tz = ""
graphTemplates = "graphTemplates.example.toml"
#extractTagsFromArgs = false

[cache]
defaultTimeoutSec = 60
memcachedServers = ["127.0.0.1:1234", "127.0.0.2:1235"]
size_mb = 0
type = "mem"

[functionsConfig]
graphiteWeb = "graphiteWeb.example.yaml"

[graphite]
host = ""
interval = "60s"
pattern = "{prefix}.{fqdn}"
prefix = "carbon.api"

[[logger]]
encoding = "console"
encodingDuration = "seconds"
encodingTime = "iso8601"
file = "stderr"
level = "debug"
logger = ""

[[logger]]
encoding = "json"
file = "carbonapi.log"
level = "info"
logger = ""

# Uncomment this to get the behavior of graphite-web as proposed in https://github.com/graphite-project/graphite-web/pull/2239
# Beware this will make darkbackground graphs less readable
#[defaultColors]
#red = "ff0000"
#green = "00ff00"
#blue = "#0000ff"
#darkred = "#c80032"
#darkgreen = "00c800"
#darkblue = "002173"

[upstreams]
backends = ["http://10.0.0.1:8080", "http://10.0.0.2:8080", "http://192.168.0.100:8080", "http://192.168.0.200:8080", "http://192.168.1.212:8080"]
buckets = 10
concurrencyLimit = 0
graphite09compat = false
keepAliveInterval = "30s"
maxIdleConnsPerHost = 100

# if upstream.backends specified, it will be used instead
[[upstreams.backendsv2.backends]]
groupName = "group1"
# supported:
#    carbonapi_v2_pb - carbonapi 0.11 or earlier version of protocol.
#    carbonapi_v3_pb - new protocol, http interface (native)
#    carbonapi_v3_grpc - new protocol, gRPC interface (native)
#    protobuf, pb, pb3 - same as carbonapi_v2_pb
#    msgpack - protocol used by graphite-web 1.1 and metrictank
#    auto - carbonapi will do it's best to guess if it's carbonapi_v3_pb or carbonapi_v2_pb
#
#  non-native protocols will be internally converted to new protocol, which will increase memory consumption
protocol = "carbonapi_v2_pb"
# supported:
#    "broadcast" - send request to all backends in group and merge responses. This was default behavior for carbonapi 0.11 or earlier
#    "roundrobin" - send request to one backend.
#    "all - same as "broadcast"
#    "rr" - same as "roundrobin"
lbMethod = "broadcast"
# amount of retries in case of unsuccessful request
maxTries = 3
# amount of metrics per fetch request. Default: 0 - unlimited. If not specified, global will be used
# interval for keep-alive http packets. If not specified, global will be used
keepAliveInterval = "10s"
# override for global concurrencyLimit.
concurrencyLimit = 0
# override for global maxIdleConnsPerHost
maxIdleConnsPerHost = 1000
# per-group timeout override. If not specified, global will be used.
# Please note that ONLY min(global, local) will be used.
    [timeouts]
        # Maximum backend request time for find requests.
        find = "2s"
        # Maximum backend request time for render requests. This is total one and doesn't take into account in-flight requests.
        render = "50s"
        # Timeout to connect to the server
        connect = "200ms"
servers = ["http://127.0.0.2:8080", "http://127.0.0.3:8080"]

[[upstreams.backendsv2.backends]]
groupName = "group2"
protocol = "carbonapi_v3_pb"
lbMethod = "roundrobin"
servers = ["http://127.0.0.4:8080", "http://127.0.0.5:8080"]

[upstreams.carbonsearch]
backend = "http://127.0.0.1:8070"
prefix = "virt.v1.*"

[upstreams.carbonsearchv2]
# carbonsearch prefix to reserve/register
prefix = "virt.v1.*"
# Carbonsearch instances. Follows the same syntax as backendsv2
    [[backends]]
        groupName = "group1"
        protocol = "carbonapi_v2_pb"
        lbMethod = "broadcast"
        servers = ["http://127.0.0.4:8080", "http://127.0.0.5:8080"]

[upstreams.timeouts]
afterStarted = "2s"
connect = "200ms"
global = "10s"
